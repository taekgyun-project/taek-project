<?xml version="1.0" encoding="UTF-8"?>
<!-- 
log4jdbc-remix.jar
slf4j-log4j12.jar
 -->
<configuration>
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!-- 로그시간 + 패키지 및 클래스명 + 메소드명 + 메소드내에 로그위치 + 로깅메시지 -->
            <pattern>%d{HH:mm:ss.SSS} %-5level %logger[%method:%line] - %msg%n</pattern>
        </encoder>
    </appender>
    <!-- 로그를 찍고자하는 클래스정보를 넣어주면 된다 
    <logger name="com.bccc.web" level="DEBUG"></logger>
    -->
    <!-- MyBatis의 Mapper.xml에 선언된 namespace명을 넣어주면 해당 쿼리가 로그에 남는다. -->
    <!-- ex> namespase가 "sql.testMapper.my" 인 경우 맨 앞에 sql만 사용하면 sql로 시작되는 모든 namespace mapper 쿼리가 표시됨  -->
    <logger name="com.biz.mapper" level="DEBUG"></logger>
 
    <!--  
    <logger name="org.springframework.context" level="INFO"></logger>
    -->
    <!-- 기본 로그 레벨  -->
    <root level="INFO">
        <appender-ref ref="console" />
    </root>
</configuration>

<!-- <log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
	<appender name="CONSOLE" class="org.apache.log4j.ConsoleAppender">
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%p - %C{1}.%M(%L) | %m%n" />
			
			%d outputs the date of the logging event. 
			%t outputs the name of the thread that generated the logging event.
			%-5p outputs the level of the logging event, where the level name has minimum of five characters and the characters are left justified.
			%c outputs the name of the logger that published the logging event. 
			%m prints the application message associated with the logging event 
			%n is the platform dependent line separator character or characters.
			
		</layout>
		<filter class="org.apache.log4j.varia.StringMatchFilter">
			<param name="StringToMatch" value="Result" />
			<param name="AcceptOnMatch" value="false" />
		</filter>
	</appender>


	log4jdbc-remix SQL & Result Set
	<logger name="jdbc.resultsettable" additivity="false">
		<level value="info" />
		<appender-ref ref="sqlout" />
	</logger>

	
	
	log SQL (pre-execution) plus exceptions caused by SQL
	변수 바인딩이 완료된 SQL을 출력한다. 
	
	<logger name="jdbc.sqlonly" additivity="false">
		<level value="warn" />
		<appender-ref ref="sqlout" />
	</logger>
	
	
	<logger name="jdbc.resultsettable" additivity="false">
		<level value="info">
			<appender-ref ref="CONSOLE">
			</appender-ref>
		</level>
	</logger>
	<logger name="jdbc.audit">
		<level value="warn">
			<appender-ref ref="CONSOLE">
			</appender-ref>
		</level>
	</logger>


	<logger name="jdbc.resultset" additivity="false">
		<level value="warn">
			<appender-ref ref="CONSOLE">
			</appender-ref>
		</level>
	</logger>

	<logger name="jdbc.sqltiming" additivity="false">
		<level value="warn">
			<appender-ref ref="CONSOLE">
			</appender-ref>
		</level>
	</logger>

	<root>
		<priority value="info">
			<appender-ref ref="CONSOLE">
			</appender-ref>
		</priority>
	</root>
</log4j:configuration>  
 -->